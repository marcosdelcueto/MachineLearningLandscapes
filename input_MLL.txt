#################################################
# General Landscape parameters
#################################################
### Parallel Computing ##########################
is_dask = True	                                 # Decide if dask is used
NCPU    = 20    	                              # Choose number of CPUs used by dask
### Verbose #####################################
verbose_level = 1                               # Level of verbosity to print at 'log_name' file (Recommended:1)
allowed_verbosity_level=[0,1,2]   					# possible values of verbosity
log_name = 'log_grid_l'                         # Name of log file. Suffix '_XX.log' is added automatically
### Landscape parameters ########################
Nspf=20                                         # Number of different landscapes generate
S=0.20                                          # Smoothness - minimum width of Gaussian functions
iseed=None 		                                 # Seed for random number to generate landscape. Default: None
param=2                                         # Number of descriptors
center_min=0.00                                 # Minimum value for center of each Gaussian in each DOF
center_max=1.00                                 # Maximum value for center of each Gaussian in each DOF
### Grid parameters #############################
grid_min=0.00                                   # Start point of grid in each DOF
grid_max=1.00                                   # End point of grid in each DOF
grid_Delta=0.01                                 # Increment of grid in each DOF
#################################################
# t1 exploration parameters
#################################################
Nwalkers = 2                                    # Number of walkers per landscape
adven = [10,100]								         # percentage of special points per walker
t0_time = 5 		                              # Number of initial unbiased steps
t1_time = 10                                    # Number of time steps for the walker
d_threshold = 0.10                              # Threshold maximum distance that at each time step
initial_sampling = 'different'                  # Initial points in a grid for different walkers
allowed_initial_sampling = ['same','different'] # possible values of 'initial_sampling'
#################################################
# t1 error metric analysis
#################################################
t1_analysis = True                              # Whether t1 analysis is performed
error_metric='rmse'                             # Choose which error metric to analyze
allowed_error_metric=[None,'rmse']              # possible error metrics to analyze
ML='KRR'                                        # Choose what ML algorithm is used
allowed_ML=[None,'kNN','GBR','GPR','KRR']       # possible ML algorithms
CV='kf'                                         # Choose cross-validation: 'kf' or 'loo' or 'sort'
allowed_CV=['kf','loo','sort']                  # possible types of cross-correlation
k_fold=10                                       # If CV='kf': number of folds for k-fold cross validation
test_last_percentage=0.1                        # If CV='sort': percentage of last points chosen as test
#################################################
# t2 exploration parameters
#################################################
t2_exploration = False                          # Whether t2 exploration is performed
t2_time = 5                                     # Number of time steps for the walker
t2_ML = 'GPR'												# Choose what ML algorithm is used
allowed_t2_ML = [None,'kNN','GBR','GPR','KRR']  # possible ML algorithms
#################################################
# Machine Learning parameters
#################################################
### k-Nearest Neighbors ('kNN') #################
n_neighbor=3                                    # Number of nearest neighbors consider for kNN regression
weights='distance'                              # Type of weight used in kNN regression
### Gradient Boosting Regression ('GBR') ########
GBR_criterion='friedman_mse'                    # function to measure quality of a split
GBR_n_estimators=100                            # number of boosting stages to perform
GBR_learning_rate=0.10                          # how much to shrink contribution of each tree
GBR_max_depth=5                                 # limits number of nodes in each tree
GBR_min_samples_split=2                         # minimum number of samples required to split an internal node
GBR_min_samples_leaf=2                          # minimum number of samples required to be at a leaf node
### Gaussian Process Regression ('GPR') #########
A_RBF=1.0                                       # hyperparameter of RBF kernel
A_noise=1.0                                     # hyperparameter of noise kernel
GPR_alpha=0.001                                 # parameter of GPR adding extra noise
kernel_length_scale=1.0                         # hyperparameter length scale of RBF kernel
kernel_noise_level=1.0                          # hyperparameter noise level of noise kernel
### Kernel Ridge Regression ('KRR') #############
KRR_kernel='rbf'                                # type of kernel (for now, jusr 'rbf' available)
KRR_alpha=1.0                                   # regularization hyperparameter: 0 equals linear least square
KRR_gamma=1.0                                   # hyperparameter controlling variance of kernel
optimize_KRR_hyperparams=True                   # decide whether to optimize KRR_gamma
KRR_alpha_lim = (0.000001,10.0)   			    	# interval in which KRR_gamma is allowed to vary
KRR_gamma_lim = (0.01,100.0)   					   # interval in which KRR_gamma is allowed to vary
#################################################
